(()=>{"use strict";var e,t,n,o,r,a,i,c,s,d,l,p,u,m,A={426:(e,t,n)=>{n.d(t,{Z:()=>u});var o=n(537),r=n.n(o),a=n(645),i=n.n(a),c=n(667),s=n.n(c),d=new URL(n(159),n.b),l=i()(r()),p=s()(d);l.push([e.id,"/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}\n\n/* ........................................................... */\n\n#content {\n\tdisplay:flex;\n\tflex-direction: column;\n\talign-items: center;\n\n\twidth: 100vw;\n\theight: 100vh;\n\n    background-image: url("+p+");\n    background-size: cover;\n    background-repeat: no-repeat;\n}\n\n#topContent {\n\tmargin: 100px;\n}\n\n#botContent {\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;;;CAGC;;AAED;;;;;;;;;;;;;CAaC,SAAS;CACT,UAAU;CACV,SAAS;CACT,eAAe;CACf,aAAa;CACb,wBAAwB;AACzB;AACA,gDAAgD;AAChD;;CAEC,cAAc;AACf;AACA;CACC,cAAc;AACf;AACA;CACC,gBAAgB;AACjB;AACA;CACC,YAAY;AACb;AACA;;CAEC,WAAW;CACX,aAAa;AACd;AACA;CACC,yBAAyB;CACzB,iBAAiB;AAClB;;AAEA,gEAAgE;;AAEhE;CACC,YAAY;CACZ,sBAAsB;CACtB,mBAAmB;;CAEnB,YAAY;CACZ,aAAa;;IAEV,yDAAwC;IACxC,sBAAsB;IACtB,4BAA4B;AAChC;;AAEA;CACC,aAAa;AACd;;AAEA;AACA",sourcesContent:["/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}\n\n/* ........................................................... */\n\n#content {\n\tdisplay:flex;\n\tflex-direction: column;\n\talign-items: center;\n\n\twidth: 100vw;\n\theight: 100vh;\n\n    background-image: url('./clearsky.jpeg');\n    background-size: cover;\n    background-repeat: no-repeat;\n}\n\n#topContent {\n\tmargin: 100px;\n}\n\n#botContent {\n}"],sourceRoot:""}]);const u=l},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",o=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),o&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),o&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,o,r,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(o)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(i[s]=!0)}for(var d=0;d<e.length;d++){var l=[].concat(e[d]);o&&i[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),n&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=n):l[2]=n),r&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=r):l[4]="".concat(r)),t.push(l))}},t}},667:e=>{e.exports=function(e,t){return t||(t={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]|(%20)/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),a="/*# ".concat(r," */"),i=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(i).concat([a]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,o=0;o<t.length;o++)if(t[o].identifier===e){n=o;break}return n}function o(e,o){for(var a={},i=[],c=0;c<e.length;c++){var s=e[c],d=o.base?s[0]+o.base:s[0],l=a[d]||0,p="".concat(d," ").concat(l);a[d]=l+1;var u=n(p),m={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==u)t[u].references++,t[u].updater(m);else{var A=r(m,o);o.byIndex=c,t.splice(c,0,{identifier:p,updater:A,references:1})}i.push(p)}return i}function r(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,r){var a=o(e=e||[],r=r||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var c=n(a[i]);t[c].references--}for(var s=o(e,r),d=0;d<a.length;d++){var l=n(a[d]);0===t[l].references&&(t[l].updater(),t.splice(l,1))}a=s}}},569:e=>{var t={};e.exports=function(e,n){var o=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var o="";n.supports&&(o+="@supports (".concat(n.supports,") {")),n.media&&(o+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(o+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),o+=n.css,r&&(o+="}"),n.media&&(o+="}"),n.supports&&(o+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(o,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},159:(e,t,n)=>{e.exports=n.p+"7da5ba54b6139d94d7ef.jpeg"}},h={};function f(e){var t=h[e];if(void 0!==t)return t.exports;var n=h[e]={id:e,exports:{}};return A[e](n,n.exports,f),n.exports}f.m=A,f.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return f.d(t,{a:t}),t},f.d=(e,t)=>{for(var n in t)f.o(t,n)&&!f.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},f.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),f.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;f.g.importScripts&&(e=f.g.location+"");var t=f.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var n=t.getElementsByTagName("script");n.length&&(e=n[n.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),f.p=e})(),f.b=document.baseURI||self.location.href,f.nc=void 0,e=f(379),t=f.n(e),n=f(795),o=f.n(n),r=f(569),a=f.n(r),i=f(565),c=f.n(i),s=f(216),d=f.n(s),l=f(589),p=f.n(l),u=f(426),(m={}).styleTagTransform=p(),m.setAttributes=c(),m.insert=a().bind(null,"head"),m.domAPI=o(),m.insertStyleElement=d(),t()(u.Z,m),u.Z&&u.Z.locals&&u.Z.locals,(()=>{const e=document.querySelector("body"),t=document.createElement("div");t.setAttribute("id","content");const n=document.createElement("div");n.setAttribute("id","topContent");const o=document.createElement("div");o.setAttribute("id","botContent"),t.appendChild(n),t.appendChild(o),e.appendChild(t)})(),async function(e){try{const t="cd422b923b03f0e42f9bffddb3a4239d",n=await fetch(`http://api.openweathermap.org/geo/1.0/direct?q=${e}&limit=1&appid=${t}`,{mode:"cors"}),o=await n.json(),{lon:r}=o[0],{lat:a}=o[0],i=await fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${a}&lon=${r}&appid=${t}`);((e,t="topContent",n="content")=>{const o=String.fromCodePoint(8451),{name:r}=e,a=e.weather[0].description,i=e.weather[0].main;let{temp:c}=e.main;const{speed:s}=e.wind,{humidity:d}=e.main;c-=273.15,c=c.toPrecision(3),console.log(e);const l=document.createElement("p");l.innerHTML=`${r}`;const p=document.createElement("p"),u=a.split(" ");let m="";for(let e=0;e<u.length;e+=1){const t=u[e].slice(0,1).toUpperCase(),n=u[e].slice(1,u[e].length);m+=`${t}${n} `,console.log(n)}m.trimEnd(),p.innerHTML=`${m}`,console.log(m);const A=document.createElement("p");A.innerHTML=`Temperature: ${c}${o}`;const h=document.createElement("p");h.innerHTML=`Humidity: ${d}%`;const f=document.createElement("p");f.innerHTML=`Wind Speed: ${(3.6*s).toPrecision(3)}kph`;const b=new Date;b.setTime(1e3*e.dt);const g=document.createElement("p");g.innerHTML=`${b.getDate()} ${["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"][b.getMonth()]}, ${["Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"][b.getDay()-1]}`;const C=document.createElement("img"),v=document.getElementById(`${n}`);switch(!0){case"Thunderstorm"===i:C.setAttribute("src","../src/icons8-storm-96.png"),C.setAttribute("alt","Thunderstorm Icon"),v.classList.add("rainy");break;case"Drizzle"===i||"Rain"===i||"Snow"===i:C.setAttribute("src","../src/icons8-rain-96.png"),C.setAttribute("alt","Rain Icon"),v.classList.add("rainy");break;case"Clear"===i:C.setAttribute("src","../src/icons8-sun-96.png"),C.setAttribute("alt","Clear Icon"),v.classList.add("clear");break;case"Clouds"===i:C.setAttribute("src","../src/icons8-cloud-96.png"),C.setAttribute("alt","Cloudy Icon"),v.classList.add("cloudy");break;default:v.classList("clear")}const y=document.getElementById(`${t}`),E=document.createElement("div");E.setAttribute("id","top-first");const w=document.createElement("div");w.setAttribute("id","top-second");const T=document.createElement("div");T.setAttribute("id","top-third");const k=document.createElement("div");k.setAttribute("id","fourth-split"),E.appendChild(g),w.appendChild(l),T.appendChild(p),T.appendChild(C),k.appendChild(A),k.appendChild(h),k.appendChild(f),y.appendChild(E),y.appendChild(w),y.appendChild(T),y.appendChild(k),(e=>{const t=document.createElement("form"),n=document.createElement("input");n.setAttribute("type","text"),n.setAttribute("id","location"),n.setAttribute("placeholder","Location");const o=document.createElement("button");o.setAttribute("type","submit"),o.innerHTML="Search";const r=document.getElementById("top-first");t.appendChild(n),t.appendChild(o),r.insertBefore(t,r.firstChild)})()})(await i.json());const c=await fetch(`https://api.openweathermap.org/data/2.5/forecast?lat=${a}&lon=${r}&appid=${t}`);((e,t="botContent")=>{for(let n=7;n<e.list.length;n+=8){console.log(e.list[n]);const o=String.fromCodePoint(8451),r=document.getElementById(`${t}`),a=document.createElement("div"),i=new Date,c=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];i.setTime(1e3*e.list[n].dt);const s=document.createElement("p");s.innerHTML=`${i.getDate()} ${c[i.getMonth()]}`;const d=document.createElement("p");d.innerHTML=e.list[n].weather[0].main;const l=document.createElement("p"),p=(e.list[n].main.feels_like-273.15).toPrecision(3);l.innerHTML=p+o;const u=document.createElement("p"),m=(e.list[n].main.temp-273.15).toPrecision(3);u.innerHTML=m+o,a.appendChild(s),a.appendChild(d),a.appendChild(l),a.appendChild(u),r.appendChild(a)}})(await c.json())}catch(e){console.log(e)}}("Singapore")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,